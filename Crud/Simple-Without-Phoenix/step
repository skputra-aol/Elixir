$ mix new rest_api --sup

##Note :
<<
mix : is the built-in build tool that comes packaged with Elixir, which can be used to create, compile, test and manage dependencies for elixir projects. mix it is similar to  npm in Node.js universe but much more powerful.

mix new : command used to create a new project in the current directory.

rest_api : is the name of our application/can any name(ex: restku_api).

--sup : flag creates our application with a supervision tree. We will learn more about why we need a supervision tree later in this chapter.
>>

$ cd rest_api
$ nano mix.exs
<<
### ubah isi fungsi : "defp deps do"
  defp deps do
    [
      # {:dep_from_hexpm, "~> 0.3.0"},
      # {:dep_from_git, git: "https://github.com/elixir-lang/my_dep.git", tag: "0.1.0"}
      
      {:plug_cowboy, "~> 2.5"},
      {:jason, "~> 1.3"}
    ]
  end
>>

$ mix deps.get
##Note : untuk instal dependencies. Mirip : npm install

$ touch lib/rest_api/router.ex
$ nano lib/rest_api/router.ex
<<
##isi dengan:
defmodule RestApi.Router do
  # Bring Plug.Router module into scope
  use Plug.Router
​
  # Attach the Logger to log incoming requests 
  plug(Plug.Logger)
  
  # Tell Plug to match the incoming request with the defined endpoints
  plug(:match)
​
  # Once there is a match, parse the response body if the content-type
  # is application/json. The order is important here, as we only want to
  # parse the body if there is a matching route.(Using the Jayson parser)
  plug(Plug.Parsers,
    parsers: [:json],
    pass: ["application/json"],
    json_decoder: Jason
  )
​
  # Dispatch the connection to the matched handler
  plug(:dispatch)
​
  # Handler for GET request with "/" path
  get "/" do
    send_resp(conn, 200, "OK")
  end
​
  # Fallback handler when there was no match
  match _ do
    send_resp(conn, 404, "Not Found")
  end
end
>>

$ nano test/rest_api_test.exs
##ubah dengan : 
<<
defmodule RestApiTest.Router do
  # Bringing ExUnit's case module to scope and configure it to run
  # tests in this module concurrently with tests in other modules
  # https://hexdocs.pm/ex_unit/ExUnit.Case.html
  use ExUnit.Case, async: true
  
  # This makes the conn object avaiable in the scope of the tests,
  # which can be used to make the HTTP request
  # https://hexdocs.pm/plug/Plug.Test.html
  use Plug.Test
  
  # We call the Plug init/1 function with the options then store
  # returned options in a Module attribute opts.
  # Note: @ is module attribute unary operator
  # https://hexdocs.pm/elixir/main/Kernel.html#@/1
  # https://hexdocs.pm/plug/Plug.html#c:init/1
  @opts RestApi.Router.init([])
 
 
  # Create a test with the name "return ok"
  test "return ok" do
  	# Build a connection which is GET request on / url
    conn = conn(:get, "/")
​
    # Then call Plug.call/2 with the connection and options
    # https://hexdocs.pm/plug/Plug.html#c:call/2
    conn = RestApi.Router.call(conn, @opts)
​
    # Finally we are using the assert/2 function to check for the
    # correctness of the response
    # https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/2
    assert conn.state == :sent
    assert conn.status == 200
    assert conn.resp_body == "OK"
  end
>>

$ mix new rest_api --sup
##Note : tes jalanin lewat UnitTest