// ref : https://saswat.dev/build-a-simple-rest-api-with-elixir-part-1/

$ mix new rest_api --sup
## Note :
<<
mix : is the built-in build tool that comes packaged with Elixir, which can be used to create, compile, test and manage dependencies for elixir projects. mix it is similar to  npm in Node.js universe but much more powerful.

mix new : command used to create a new project in the current directory.

rest_api : is the name of our application/can any name(ex: restku_api).

--sup : flag creates our application with a supervision tree. We will learn more about why we need a supervision tree later in this chapter.
>>

$ cd rest_api
$ nano mix.exs
<<
### ubah isi fungsi : "defp deps do" , tambahkan plug_cowboy:tuk http, jason, mongodb library
  defp deps do
    [
      # {:dep_from_hexpm, "~> 0.3.0"},
      # {:dep_from_git, git: "https://github.com/elixir-lang/my_dep.git", tag: "0.1.0"}
      
      {:plug_cowboy, "~> 2.5"},
      {:jason, "~> 1.3"},
      {:mongodb_driver, "~> 0.8"}
    ]
  end
>>

$ mix deps.get
## Note : untuk instal dependencies. Mirip : npm install

$ touch lib/rest_api/router.ex
$ nano lib/rest_api/router.ex
<<
## isi dengan:
defmodule RestApi.Router do
  # Bring Plug.Router module into scope
  use Plug.Router
  plug(Plug.Logger)
  
  # Tell Plug to match the incoming request with the defined endpoints
  plug(:match)
  # Once there is a match, parse the response body if the content-type
  # is application/json. The order is important here, as we only want to
  # parse the body if there is a matching route.(Using the Jayson parser)
  plug(Plug.Parsers,
    parsers: [:json],
    pass: ["application/json"],
    json_decoder: Jason
  )
  
  # Dispatch the connection to the matched handler
  plug(:dispatch)
  
  # Handler for GET request with "/" path
  get "/" do
    send_resp(conn, 200, "OK")
  end
  
  ## Fallback handler when there was no match
  match _ do
    send_resp(conn, 404, "Not Found")
  end
end
>>

$ nano test/rest_api_test.exs
##ubah dengan : 
<<
# Create a test with the name "return ok"
  test "return ok" do
  	# Build a connection which is GET request on / url
    conn = conn(:get, "/")
    
    # Then call Plug.call/2 with the connection and options
    # https://hexdocs.pm/plug/Plug.html#c:call/2
    conn = RestApi.Router.call(conn, @opts)
    
    # Finally we are using the assert/2 function to check for the
    # correctness of the response
    # https://hexdocs.pm/ex_unit/ExUnit.Assertions.html#assert/2
    assert conn.state == :sent
    assert conn.status == 200
    assert conn.resp_body == "OK"
  end
>>

$ mix test
## Note : tes jalanin lewat UnitTest



## Ref : https://saswat.dev/build-a-simple-rest-api-with-elixir-part-2/
$ mkdir config
$ nano config/config.exs
## isi dengan :
<<
import Config

import_config "#{config_env()}.exs"
>>

$ nano config/dev.env.exs
## Isi dengan :
<<
import Config
config :rest_api, port: 8080
>>

$ nano config/prod.env.exs
## Isi dengan :
<<
import Config
config :rest_api, port: 80
>>

$ nano
## ubah fungsi "def start(_type, _args)" dengan :
<<
  @impl true
  def start(_type, _args) do
    children = [
      {
      	Plug.Cowboy, 
      	scheme: :http, 
        plug: RestApi.Router, 
        options: [port: Application.get_env(:rest_api, :port)]
      }
    ]

    opts = [strategy: :one_for_one, name: RestApi.Supervisor]
    Supervisor.start_link(children, opts)
  end
>>

$ iex -S mix run
## Note : Run server. bila dicodecspace: tambahkan port 8080 tuk dev


$ nano docker-compose.yml
## create file docker compose untuk membuat server mongodb. Isi dengan :
<<
version: "3"
services:
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    restart: unless-stopped
    healthcheck:
      test: test $$(echo "rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"localhost:27017\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
      interval: 10s
      start_period: 30s
    command: "mongod --bind_ip_all --replSet rs0"
>>

$ docker compose up -d
## Run docker compose

$ docker ps

$ docker compose down
##Stop docker compose

$ nano mix.exs
## tambahkan pada fungsi "defp deps" :
<<  {:mongodb_driver, "~> 0.8"}  >>

$ mix deps.get
## Note : update dependency

$ nano lib/application.ex
## tambahkan mongodb di children (untuk supervisor environment)
<<
children = [
      {
      	Plug.Cowboy, 
      	scheme: :http, 
        plug: RestApi.Router, 
        options: [port: Application.get_env(:rest_api, :port)]
      },
      {
        Mongo,
        [
          name: :mongo,
          database: Application.get_env(:rest_api, :database),
          pool_size: Application.get_env(:rest_api, :pool_size)
        ]
      }
>>

$ nano config/dev.env.exs  (test dan prod juga)
## ubah jadi :
<<
import Config

config :rest_api, port: 8080
config :rest_api, database: "rest_api_db"
config :rest_api, pool_size: 3
>>

$ nano lib/router.ex
## tambahkan :
<<
#### kalo sukses :ok , kalo error :error
get "/knockknock" do
    case Mongo.command(:mongo, ping: 1) do
      {:ok, _res} -> send_resp(conn, 200, "Who's there?")
      {:error, _err} -> send_resp(conn, 500, "Something went wrong")
    end
  end
>>

$ iex -S mix run
## run server